<Application x:Class="Moen.KanColle.Dentan.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:rv="clr-namespace:Moen.KanColle.Dentan.View">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Dentan;component/Style/Converters.xaml" />
                <ResourceDictionary Source="/Dentan;component/Style/ListBoxStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Color x:Key="WindowBackgroundColor">#595959</Color>
            <Color x:Key="HighlightColor">#FF3F3F41</Color>
            <Color x:Key="BlueColor">#FF007ACC</Color>
            <Color x:Key="ForegroundColor">#FFF4F4F5</Color>

            <SolidColorBrush x:Key="WindowBackgroundColorBrush" Color="{StaticResource WindowBackgroundColor}"/>
            <SolidColorBrush x:Key="HighlightColorBrush" Color="{StaticResource HighlightColor}"/>
            <SolidColorBrush x:Key="BlueColorBrush" Color="{StaticResource BlueColor}"/>
            <SolidColorBrush x:Key="ForegroundColorBrush" Color="{StaticResource ForegroundColor}"/>

            <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Background="{TemplateBinding Background}">
                                <ContentPresenter x:Name="contentPresenter"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{StaticResource HighlightColorBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource BlueColorBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--<Style TargetType="{x:Type Window}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">
                            <Border x:Name="WindowBorder" Margin="{Binding Source={x:Static SystemParameters.WindowNonClientFrameThickness}}" Background="{StaticResource WindowBackgroundColorBrush}">
                                <Grid>
                                    <Border BorderThickness="1">
                                        <AdornerDecorator>
                                            <Grid x:Name="LayoutRoot">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="25" />
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="15" />
                                                </Grid.RowDefinitions>
                                                <ContentPresenter Grid.Row="1" Grid.RowSpan="2" Margin="7"/>
                                                <Rectangle x:Name="HeaderBackground" Height="25" Fill="{DynamicResource WindowBackgroundColorBrush}" VerticalAlignment="Top" Grid.Row="0"/>
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0">
                                                    <Button Command="{Binding Source={x:Static SystemCommands.MinimizeWindowCommand}}" ToolTip="minimize" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="30" Height="25" RenderTransform="1,0,0,1,0,1">
                                                                <Path Data="M0,6 L8,6 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                    <Grid Margin="1,0,1,0">
                                                        <Button x:Name="Restore" Command="{Binding Source={x:Static SystemCommands.RestoreWindowCommand}}" ToolTip="restore" Visibility="Collapsed" Style="{StaticResource WindowButtonStyle}">
                                                            <Button.Content>
                                                                <Grid Width="30" Height="25" UseLayoutRounding="True" RenderTransform="1,0,0,1,.5,.5">
                                                                    <Path Data="M2,0 L8,0 L8,6 M0,3 L6,3 M0,2 L6,2 L6,8 L0,8 Z" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1"  />
                                                                </Grid>
                                                            </Button.Content>
                                                        </Button>
                                                        <Button x:Name="Maximize" Command="{Binding Source={x:Static SystemCommands.MaximizeWindowCommand}}" ToolTip="maximize" Style="{StaticResource WindowButtonStyle}">
                                                            <Button.Content>
                                                                <Grid Width="31" Height="25">
                                                                    <Path Data="M0,1 L9,1 L9,8 L0,8 Z" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                                </Grid>
                                                            </Button.Content>
                                                        </Button>
                                                    </Grid>
                                                    <Button Command="{Binding Source={x:Static SystemCommands.CloseWindowCommand}}" ToolTip="close"  Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="30" Height="25" RenderTransform="1,0,0,1,0,1">
                                                                <Path Data="M0,0 L8,7 M8,0 L0,7 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1.5"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                </StackPanel>
                                                <TextBlock x:Name="WindowTitleTextBlock" Grid.Row="0" Text="{TemplateBinding Title}" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"  Margin="8 -1 0 0"  FontSize="16"  Foreground="{TemplateBinding Foreground}"/>
                                                <Grid Grid.Row="2">
                                                    <Path x:Name="ResizeGrip" Visibility="Collapsed" Width="12" Height="12" Margin="1" HorizontalAlignment="Right"
                                        Stroke="{StaticResource BlueColorBrush}" StrokeThickness="1" Stretch="None" Data="F1 M1,10 L3,10 M5,10 L7,10 M9,10 L11,10 M2,9 L2,11 M6,9 L6,11 M10,9 L10,11 M5,6 L7,6 M9,6 L11,6 M6,5 L6,7 M10,5 L10,7 M9,2 L11,2 M10,1 L10,3" />
                                                </Grid>
                                            </Grid>
                                        </AdornerDecorator>
                                    </Border>
                                    --><!--<Border BorderBrush="{StaticResource BlueColorBrush}" BorderThickness="1" Visibility="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource bool2VisibilityConverter}}" />--><!--
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="WindowState" Value="Maximized">
                                    <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="Restore" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="LayoutRoot" Property="Margin" Value="7" />
                                </Trigger>
                                <Trigger Property="WindowState" Value="Normal">
                                    <Setter TargetName="Maximize" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="Restore" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                        <Condition Property="WindowState" Value="Normal" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>-->
            
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
            </Style>
            <Style TargetType="{x:Type Control}">
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="Foreground" Value="White" />
            </Style>
            
            <Style TargetType="{x:Type ToolTip}">
                <Setter Property="Background" Value="#444444" />
                <Setter Property="Foreground" Value="White" />
            </Style>
            
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="Foreground" Value="White" />
            </Style>

            <rv:MenuSeparatorStyleSelector x:Key="MenuSeparatorStyleSelector" />

            <Style TargetType="{x:Type Menu}">
                <Setter Property="Background" Value="#444444" />
                <Setter Property="Foreground" Value="White" />
            </Style>

            <SolidColorBrush x:Key="MenuSeparatorBorderBrush" Color="#333337"/>
            <SolidColorBrush x:Key="MenuItemHighlightedBackground" Color="#3E3E40"/>
            <SolidColorBrush x:Key="SubmenuItemBackground" Color="#1B1B1C"/>
            <SolidColorBrush x:Key="SubmenuItemBackgroundHighlighted" Color="#333334"/>
            <SolidColorBrush x:Key="MenuDisabledForeground" Color="#656565"/>

            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
                <Setter Property="ItemContainerStyleSelector" Value="{StaticResource MenuSeparatorStyleSelector}" />
                <Setter Property="Command" Value="{Binding Command}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border Name="Border" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" SnapsToDevicePixels="False">
                                <Grid Name="Grid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Name="IconColumn" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumn"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemTextColumn"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumn"/>
                                        <ColumnDefinition Name="SubmenuArrowColumn" Width="14"/>
                                    </Grid.ColumnDefinitions>

                                    <ContentPresenter Name="Icon" ContentSource="Icon" VerticalAlignment="Center" />
                                    <ContentPresenter Name="Header" ContentSource="Header" RecognizesAccessKey="True" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Grid.Column="1" />
                                    <ContentPresenter Name="IGT" ContentSource="InputGestureText" Margin="8,1,8,1" VerticalAlignment="Center" Grid.Column="2"/>

                                    <Grid Name="SubmenuArrow" Margin="4,0,6,0" VerticalAlignment="Center" Grid.Column="3">
                                        <Path Name="SubmenuArrowPath" Data="M0,0 L0,8 L4,4 z" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                                    </Grid>

                                    <Popup Name="SubMenuPopup" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                           Placement="Right" HorizontalOffset="-1" Focusable="false"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                           AllowsTransparency="True">
                                        <Grid Margin="0,0,5,5">
                                            <Border Name="SubMenuBorder" Background="{StaticResource SubmenuItemBackground}" BorderBrush="{StaticResource MenuSeparatorBorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
                                                <Grid Name="SubMenu" Margin="2" Grid.IsSharedSizeScope="True">
                                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                                </Grid>
                                                <Border.Effect>
                                                    <DropShadowEffect ShadowDepth="2" Color="Black"/>
                                                </Border.Effect>
                                            </Border>
                                            <Border Name="TransitionBorder" Background="{StaticResource SubmenuItemBackground}" BorderBrush="{StaticResource SubmenuItemBackground}" BorderThickness="1"
                                            Width="0" Height="2" Margin="1,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" SnapsToDevicePixels="False" />
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6,0,6,2"/>

                                    <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
                                    <Setter TargetName="IconColumn" Property="MinWidth" Value="0" />
                                    <Setter TargetName="SubmenuArrowColumn" Property="Width" Value="Auto" />
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="IGT" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="SubmenuArrow" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SubMenuBorder" Property="BorderThickness" Value="1, 1, 1, 1" />
                                    <Setter TargetName="SubMenu" Property="Margin" Value="2,3,2,2" />
                                    <Setter TargetName="TransitionBorder" Property="Width" Value="{Binding ActualWidth, ElementName=Grid}"/>
                                </Trigger>
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,0,6,2"/>

                                    <Setter TargetName="IconColumn" Property="MinWidth" Value="0" />
                                    <Setter TargetName="SubmenuArrowColumn" Property="Width" Value="Auto" />
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="IGT" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="SubmenuArrow" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top" />
                                    <Setter Property="Padding" Value="10,3,0,3" />

                                    <Setter TargetName="Border" Property="MinHeight" Value="22" />
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SubmenuItemBackground}" />
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="10,3,0,3"/>

                                    <Setter TargetName="Border" Property="MinHeight" Value="22" />
                                    <Setter TargetName="SubmenuArrow" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SubmenuItemBackground}" />
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True"/>
                                        <Condition Property="Role" Value="TopLevelHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource MenuItemHighlightedBackground}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True"/>
                                        <Condition Property="Role" Value="TopLevelItem"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource MenuItemHighlightedBackground}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True"/>
                                        <Condition Property="Role" Value="SubmenuHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SubmenuItemBackgroundHighlighted}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True"/>
                                        <Condition Property="Role" Value="SubmenuItem"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SubmenuItemBackgroundHighlighted}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSubmenuOpen" Value="True"/>
                                        <Condition Property="Role" Value="TopLevelHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SubmenuItemBackground}"/>
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MenuSeparatorBorderBrush}"/>
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                                </MultiTrigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                                    <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource MenuDisabledForeground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
    
</Application>
